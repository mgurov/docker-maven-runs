<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <!--
     Simple demo project demonstrating the usage of rhuss/docker-maven-plugin
  -->
  <groupId>com.github.mgurov</groupId>
  <artifactId>docker-maven-runs</artifactId>
  <version>0.0.1</version>
  <packaging>pom</packaging>

  <properties>
    <docker.maven.image>maven:3.3.3-jdk-7</docker.maven.image>
    <docker.maven.timeout>50000</docker.maven.timeout>
  </properties>

  <build>
    <plugins>
      <plugin>
        <groupId>org.jolokia</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>0.13.4-SNAPSHOT</version>
        <configuration>
          <images>

          </images>
        </configuration>
        <executions>
          <execution>
            <id>start</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>build</goal>
              <goal>start</goal>
            </goals>
          </execution>
          <execution>
            <id>stop</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>

      <id>noopLogs</id>
      <activation>
        <property><name>runAll</name></property>
      </activation>

      <build>
        <plugins>
          <plugin>
          <groupId>org.jolokia</groupId>
          <artifactId>docker-maven-plugin</artifactId>
          <configuration>
            <images>

              <image>
                <alias>dont-wait-no-time-specified</alias>
                <name>${docker.maven.image}</name>
                <run>
                  <cmd>mvn docker:start docker:stop</cmd>
                  <log/>
                  <wait>
                    <!--<fail>Waited  2\d{3} ms</fail>-->
                    <log>\[INFO\] BUILD SUCCESS</log>
                    <time>${docker.maven.timeout}</time>
                  </wait>
                  <volumes>
                    <bind>
                      <volume>${project.basedir}/wait-noop/dont-wait-no-time-specified.pom.xml:/work/pom.xml</volume>
                      <volume>${settings.localRepository}:/root/.m2/repository/</volume>
                      <volume>/var/run/docker.sock:/var/run/docker.sock</volume>
                    </bind>
                  </volumes>
                  <workingDir>/work</workingDir>
                </run>
              </image>

              <image>
                <alias>wait-timeout-specified</alias>
                <name>${docker.maven.image}</name>
                <run>
                  <cmd>mvn docker:start docker:stop</cmd>
                  <log/>
                  <wait>
                    <log>Timeout after 2\d{3} ms while waiting on log out</log>
                    <time>${docker.maven.timeout}</time>
                  </wait>
                  <volumes>
                    <bind>
                      <volume>${project.basedir}/wait-noop/wait-timeout-specified.pom.xml:/work/pom.xml</volume>
                      <volume>${settings.localRepository}:/root/.m2/repository/</volume>
                      <volume>/var/run/docker.sock:/var/run/docker.sock</volume>
                    </bind>
                  </volumes>
                  <workingDir>/work</workingDir>
                </run>
              </image>

              <image>
                <alias>wait-timeout-implicit</alias>
                <name>${docker.maven.image}</name>
                <run>
                  <cmd>mvn docker:start docker:stop</cmd>
                  <log/>
                  <wait>
                    <log>Timeout after 10\d{3} ms while waiting on log out</log>
                    <time>${docker.maven.timeout}</time>
                  </wait>
                  <volumes>
                    <bind>
                      <volume>${project.basedir}/wait-noop/wait-timeout-implicit.pom.xml:/work/pom.xml</volume>
                      <volume>${settings.localRepository}:/root/.m2/repository/</volume>
                      <volume>/var/run/docker.sock:/var/run/docker.sock</volume>
                    </bind>
                  </volumes>
                  <workingDir>/work</workingDir>
                </run>
              </image>

              <image>
                <alias>wait-no-checks-specified</alias>
                <name>${docker.maven.image}</name>
                <run>
                  <cmd>mvn docker:start docker:stop</cmd>
                  <log/>
                  <wait>
                    <log>Waited  2\d{3} ms</log>
                    <!--<log>BUILD SUCCESS</log>-->
                    <time>${docker.maven.timeout}</time>
                  </wait>
                  <volumes>
                    <bind>
                      <volume>${project.basedir}/wait-noop/wait-no-checks-specified.pom.xml:/work/pom.xml</volume>
                      <volume>${settings.localRepository}:/root/.m2/repository/</volume>
                      <volume>/var/run/docker.sock:/var/run/docker.sock</volume>
                    </bind>
                  </volumes>
                  <workingDir>/work</workingDir>
                </run>
              </image>

            </images>
          </configuration>
          </plugin>
        </plugins>
      </build>

    </profile>

    <profile>

      <id>fullExecOnStart</id>
      <activation>
        <property><name>runAll</name></property>
      </activation>

      <build>
        <plugins>
          <plugin>
          <groupId>org.jolokia</groupId>
          <artifactId>docker-maven-plugin</artifactId>
          <configuration>
            <images>
              <image>
                <alias>good</alias>
                <name>${docker.maven.image}</name>
                <run>
                  <cmd>mvn verify</cmd>
                  <log/>
                  <wait>
                    <log>\[INFO\] BUILD SUCCESS</log>
                    <time>${docker.maven.timeout}</time>
                  </wait>
                  <volumes>
                    <bind>
                      <volume>${project.basedir}/expected-to-succeed/pom.xml:/work/pom.xml</volume>
                      <volume>${settings.localRepository}:/root/.m2/repository/</volume>
                      <volume>/var/run/docker.sock:/var/run/docker.sock</volume>
                    </bind>
                  </volumes>
                  <workingDir>/work</workingDir>
                </run>
              </image>
              <image>
                <alias>fail-on-empty-run-cmd</alias>
                <name>${docker.maven.image}</name>
                <run>
                  <cmd>mvn docker:start</cmd>
                  <log/>
                  <wait>
                    <log>failed: Argument conflict: either shell or args should be specified and only in one form.</log>
                    <time>${docker.maven.timeout}</time>
                  </wait>
                  <volumes>
                    <bind>
                      <volume>${project.basedir}/expected-to-fail/empty-run-cmd.pom.xml:/work/pom.xml</volume>
                      <volume>${settings.localRepository}:/root/.m2/repository/</volume>
                    </bind>
                  </volumes>
                  <workingDir>/work</workingDir>
                </run>
              </image>

              <image>
                <alias>fail-on-empty-run-entrypoint</alias>
                <name>${docker.maven.image}</name>
                <run>
                  <cmd>mvn docker:start</cmd>
                  <log/>
                  <wait>
                    <log>failed: Argument conflict: either shell or args should be specified and only in one form.</log>
                    <time>${docker.maven.timeout}</time>
                  </wait>
                  <volumes>
                    <bind>
                      <volume>${project.basedir}/expected-to-fail/empty-run-entrypoint.pom.xml:/work/pom.xml</volume>
                      <volume>${settings.localRepository}:/root/.m2/repository/</volume>
                    </bind>
                  </volumes>
                  <workingDir>/work</workingDir>
                </run>
              </image>

              <image>
                <alias>fail-on-build-entrypoint-both-shell-and-exec</alias>
                <name>${docker.maven.image}</name>
                <run>
                  <cmd>mvn docker:build</cmd>
                  <log/>
                  <wait>
                    <log>failed: Argument conflict: either shell or args should be specified and only in one form.</log>
                    <time>${docker.maven.timeout}</time>
                  </wait>
                  <volumes>
                    <bind>
                      <volume>${project.basedir}/expected-to-fail/build-entrypoint-both-shell-and-exec.pom.xml:/work/pom.xml</volume>
                      <volume>${settings.localRepository}:/root/.m2/repository/</volume>
                    </bind>
                  </volumes>
                  <workingDir>/work</workingDir>
                </run>
              </image>

              <image>
                <alias>build-entrypoint-exec-both-inlined-and-full</alias>
                <name>${docker.maven.image}</name>
                <run>
                  <cmd>mvn docker:build</cmd>
                  <log/>
                  <wait>
                    <log>failed: Argument conflict: either shell or args should be specified and only in one form.</log>
                    <time>${docker.maven.timeout}</time>
                  </wait>
                  <volumes>
                    <bind>
                      <volume>${project.basedir}/expected-to-fail/build-entrypoint-exec-both-inlined-and-full.pom.xml:/work/pom.xml</volume>
                      <volume>${settings.localRepository}:/root/.m2/repository/</volume>
                    </bind>
                  </volumes>
                  <workingDir>/work</workingDir>
                </run>
              </image>

            </images>
          </configuration>
          </plugin>
        </plugins>
      </build>

    </profile>
  </profiles>

</project>
